function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react-native/no-inline-styles */
import React, { memo, useCallback, useEffect, useRef, useState } from 'react';
import { View, StyleSheet, Dimensions, FlatList } from 'react-native';
import { TextInput, Button, Dialog, Portal, Searchbar, ThemeProvider, useTheme, Text } from 'react-native-paper';
import CheckboxInput from '../components/checkBox';

const PaperSelect = ({
  // Required props
  label,
  arrayList,
  selectedArrayList,
  multiEnable,
  value,
  onSelection,
  // Core props
  disabled = false,
  hideSearchBox = false,
  selectAllEnable = true,
  textInputMode = 'flat',
  theme: themeOverrides,
  inputRef,
  limit = null,
  limitError = `You can't select more than ${limit} items.`,
  limitErrorStyle,
  // Localization props
  dialogTitle,
  selectAllText = 'Select all',
  searchText = 'Search',
  dialogCloseButtonText = 'Close',
  dialogDoneButtonText = 'Done',
  errorText,
  // Style props
  containerStyle,
  textInputStyle,
  textInputOutlineStyle,
  dialogStyle,
  dialogTitleStyle,
  searchStyle,
  dialogCloseButtonStyle,
  dialogDoneButtonStyle,
  errorStyle,
  textColor,
  // Component props
  textInputProps: textInputPropOverrides,
  checkboxProps: checkboxPropsOverrides,
  searchbarProps: searchbarPropsOverrides,
  // New testID props
  testID,
  dialogTestID,
  searchbarTestID,
  selectAllCheckboxTestID,
  itemCheckboxTestIDPrefix = 'checkbox-' // Prefix for item checkboxes testID

}) => {
  var _textInputPropOverrid, _textInputPropOverrid2, _textInputPropOverrid3, _textInputPropOverrid4, _textInputPropOverrid5;

  const theme = useTheme(themeOverrides);
  const textInputIconProps = {
    style: styles.textInputIcon,
    size: 20,
    icon: 'chevron-down'
  };
  const textInputProps = {
    underlineColor: (_textInputPropOverrid = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.underlineColor) !== null && _textInputPropOverrid !== void 0 ? _textInputPropOverrid : 'black',
    activeUnderlineColor: (_textInputPropOverrid2 = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.activeUnderlineColor) !== null && _textInputPropOverrid2 !== void 0 ? _textInputPropOverrid2 : 'black',
    outlineColor: (_textInputPropOverrid3 = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.outlineColor) !== null && _textInputPropOverrid3 !== void 0 ? _textInputPropOverrid3 : 'black',
    activeOutlineColor: (_textInputPropOverrid4 = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.activeOutlineColor) !== null && _textInputPropOverrid4 !== void 0 ? _textInputPropOverrid4 : 'black',
    left: textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.left,
    right: (_textInputPropOverrid5 = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.right) !== null && _textInputPropOverrid5 !== void 0 ? _textInputPropOverrid5 : /*#__PURE__*/React.createElement(TextInput.Icon, textInputIconProps)
  };
  const {
    height
  } = Dimensions.get('window');
  const [searchKey, setSearchKey] = useState('');
  const [arrayHolder, setArrayHolder] = useState([...arrayList]);
  const [list, setList] = useState([...arrayList]);
  const [selectedList, setSelectedList] = useState([...selectedArrayList]);
  const [maxLimit, setMaxLimit] = useState(list.length);
  const [hasDisabled, setHasDisabled] = useState(false);
  const [showLimitError, setShowLimitError] = useState(false);
  const selfInputRef = useRef(null);
  const selectInputRef = inputRef !== null && inputRef !== void 0 ? inputRef : selfInputRef;
  const [visible, setVisible] = useState(false);
  const triggeredByOnCheckedSingle = useRef(false);
  useEffect(() => {
    let isMounted = true;

    let _getData = async () => {
      if (isMounted && showLimitError) {
        setTimeout(() => {
          setShowLimitError(false);
        }, 10000);
      }
    };

    _getData();

    return () => {
      isMounted = false;
    };
  }, [showLimitError]);

  const showDialog = () => setVisible(true);

  const _hideDialog = useCallback(() => {
    setSearchKey('');
    var data = [...arrayHolder];
    var selectedData = [...selectedList];
    let finalText = '';
    selectedData.forEach((val, index) => {
      data.forEach(el => {
        if (val._id === el._id) {
          finalText += index !== selectedData.length - 1 ? `${el.value}, ` : `${el.value}`;
        }
      });
    });
    onSelection({
      text: finalText,
      selectedList: selectedData
    });
    setVisible(false);

    if (selectInputRef && selectInputRef.current) {
      selectInputRef.current.blur();
    }
  }, [arrayHolder, selectedList, onSelection, selectInputRef]);

  const _closeDialog = () => {
    setVisible(false);
    setSearchKey('');

    if (selectInputRef && selectInputRef.current) {
      selectInputRef.current.blur();
    }
  };

  const _onFocus = () => {
    setArrayHolder([...arrayList]);
    setList([...arrayList]);
    setMaxLimit([...arrayList].length);
    setHasDisabled(_checkIfAnyItemDisabled([...arrayList]));
    setSelectedList([...selectedArrayList]);
    showDialog();
  };

  const _onChecked = item => {
    var selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.findIndex(val => val._id === item._id);

    if (indexSelected > -1) {
      selectedData.splice(indexSelected, 1);
    } else {
      if (limit && selectedData.length === limit) {
        setShowLimitError(true);
      } else {
        setShowLimitError(false);
        selectedData.push(item);
      }
    }

    setSelectedList([...selectedData]);
  };

  const _onCheckedSingle = item => {
    triggeredByOnCheckedSingle.current = true;
    var selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.findIndex(val => val._id === item._id);

    if (indexSelected > -1) {
      // selectedData.splice(indexSelected, 1);
      selectedData = [];
    } else {
      selectedData = [];
      selectedData.push(item);
    } // console.log(selectedData);


    setSelectedList([...selectedData]);
  };

  useEffect(() => {
    if (triggeredByOnCheckedSingle.current) {
      triggeredByOnCheckedSingle.current = false;

      _hideDialog();
    }
  }, [selectedList, _hideDialog]);

  const _exists = item => {
    // console.log(selectedList);
    let _temp = [...selectedList];
    return _temp.find(val => val._id === item._id) ? true : false;
  };

  const _isCheckedAll = () => {
    const data = [...list];
    const selectedData = [...selectedList];
    return selectedData.length !== 0 && selectedData.length === data.length;
  };

  const _checkAll = () => {
    const data = [...list];
    var selectedData = [...selectedList];

    if (selectedData.length === data.length) {
      selectedData = [];
    } else if (selectedData.length === 0 || selectedData.length > 0) {
      selectedData = data.slice(0);
    }

    setSelectedList([...selectedData]);
  };

  const _renderItem = ({
    item
  }) => /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, checkboxPropsOverrides, {
    isChecked: _exists(item),
    label: item.value,
    onPress: () => {
      multiEnable === true ? _onChecked(item) : _onCheckedSingle(item);
    },
    disabled: item.disabled,
    testID: `${itemCheckboxTestIDPrefix}${item._id}`
  }));

  const _filterFunction = text => {
    setSearchKey(text);
    const newData = arrayHolder.filter(item => item.value.toLowerCase().includes(text.toLowerCase()));
    setList(newData);
  };

  const _checkIfAnyItemDisabled = _list => {
    const data = [..._list];
    let result = data.find(x => x.disabled);
    return result ? true : false;
  };

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/React.createElement(TextInput, _extends({}, textInputProps, {
    ref: selectInputRef,
    disabled: disabled,
    style: [styles.textInput, textInputStyle],
    outlineStyle: textInputOutlineStyle,
    label: label,
    mode: textInputMode,
    onFocus: disabled ? undefined : _onFocus,
    showSoftInputOnFocus: false,
    value: value,
    textColor: textColor,
    error: errorText && (errorText === null || errorText === void 0 ? void 0 : errorText.length) > 0 ? true : false,
    testID: testID
  })), errorText ? /*#__PURE__*/React.createElement(Text, {
    style: [{
      color: theme.colors.error
    }, errorStyle]
  }, errorText) : null), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Dialog, {
    style: [styles.dialog, dialogStyle],
    visible: visible,
    dismissable: false,
    testID: dialogTestID
  }, /*#__PURE__*/React.createElement(Dialog.Title, {
    style: dialogTitleStyle
  }, dialogTitle !== null && dialogTitle !== void 0 ? dialogTitle : label), /*#__PURE__*/React.createElement(Dialog.ScrollArea, {
    style: {
      paddingHorizontal: 14
    }
  }, !hideSearchBox ? /*#__PURE__*/React.createElement(Searchbar, _extends({}, searchbarPropsOverrides, {
    value: searchKey,
    placeholder: searchText,
    onChangeText: text => _filterFunction(text),
    style: [styles.searchbar, searchStyle],
    testID: searchbarTestID
  })) : null, /*#__PURE__*/React.createElement(FlatList, {
    ListHeaderComponent: multiEnable === true && selectAllEnable === true ? /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, checkboxPropsOverrides, {
      isChecked: _isCheckedAll(),
      label: selectAllText,
      onPress: () => {
        _checkAll();
      },
      disabled: hasDisabled || limit && limit > 0 && limit !== maxLimit ? true : false,
      testID: selectAllCheckboxTestID
    })) : null,
    data: list,
    renderItem: _renderItem,
    keyExtractor: item => item._id.toString(),
    keyboardShouldPersistTaps: "handled",
    style: (styles.dialogScrollView, {
      maxHeight: height - height * 45 / 100,
      marginBottom: 8
    })
  }), showLimitError ? /*#__PURE__*/React.createElement(Text, {
    style: [{
      color: theme.colors.error
    }, limitErrorStyle]
  }, limitError) : null), /*#__PURE__*/React.createElement(Dialog.Actions, null, /*#__PURE__*/React.createElement(Button, {
    labelStyle: dialogCloseButtonStyle,
    onPress: _closeDialog
  }, dialogCloseButtonText), /*#__PURE__*/React.createElement(Button, {
    labelStyle: dialogDoneButtonStyle,
    onPress: _hideDialog
  }, dialogDoneButtonText))))));
};

const styles = StyleSheet.create({
  container: {
    width: '100%',
    marginBottom: 10
  },
  dialog: {
    borderRadius: 5
  },
  dialogScrollView: {
    width: '100%'
  },
  textInput: {// backgroundColor: '#fff',
    // color: '#000',
  },
  textInputIcon: {
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    alignContent: 'center'
  },
  searchbar: {
    borderColor: '#777777',
    backgroundColor: '#F1F1F2',
    borderWidth: 0.25,
    marginBottom: 10,
    marginHorizontal: 8,
    color: '#000',
    marginTop: 12
  }
});
export default /*#__PURE__*/memo(PaperSelect);
//# sourceMappingURL=paperSelect.js.map